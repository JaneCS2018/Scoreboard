{"version":3,"sources":["serviceWorker.js","Stats.js","Stopwatch.js","Header.js","Counter.js","Icon.js","Player.js","AddPlayerForm.js","index.js"],"names":["Boolean","window","location","hostname","match","Stats","props","totalPlayers","players","length","totalPoints","reduce","total","player","score","className","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","prevState","handleStopwatch","handleReset","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","Counter","index","changeScore","Icon","isHighScore","viewBox","d","transform","width","height","Player","name","id","removePlayer","PureComponent","AddPlayerForm","playerInput","React","createRef","handleValueChange","e","value","target","handleSubmit","preventDefault","addPlayer","current","currentTarget","reset","onSubmit","type","ref","placeholder","App","handleScoreChange","delta","handleAddPlayer","handleRemovePlayer","filter","p","getHighScore","scores","map","highScore","max","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1b41937.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst Stats = (props) =>{\n\n    const totalPlayers = props.players.length;\n    const totalPoints = props.players.reduce( (total, player) => {\n        return total + player.score;\n    }, 0);\n\n\n                return (\n                    <table className=\"stats\">\n                        <tbody>\n                        <tr>\n                            <td>Players:</td>\n                            <td>{totalPlayers}</td>\n                        </tr>\n                        <tr>\n                            <td>Total Points:</td>\n                            <td>{totalPoints}</td>\n                        </tr>\n                        </tbody>\n                    </table>\n                );\n\n\n}\n\nStats.propTypes = {\n    players: PropTypes.arrayOf(PropTypes.shape({\n        score: PropTypes.number\n    })).isRequired\n};\n\nexport default Stats;\n\n","import React,{Component} from \"react\";\n\nclass Stopwatch extends Component{\n    state={\n        isRunning: false,\n        elapsedTime: 0,\n        previousTime: 0\n    }\n\n    componentDidMount() {\n        this.intervalID = setInterval(()=>this.tick(),100)\n    }\n\n    //clear up the tick\n    componentWillUnmount() {\n        clearInterval(this.intervalID);\n    }\n\n    tick=()=>{\n        if (this.state.isRunning){\n            const now = Date.now();\n            this.setState( prevState=>({\n               previousTime: now,\n               elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\n            }));\n        }\n    }\n\n    handleStopwatch=()=>{\n       this.setState(prevState=>({\n           isRunning: !prevState.isRunning\n       }));\n       if(!this.state.isRunning){\n           this.setState({previousTime: Date.now()});\n\n       }\n    }\n\n    handleReset = () =>{\n        this.setState({elapsedTime: 0})\n    }\n\n    render() {\n        const seconds = Math.floor(this.state.elapsedTime/1000)\n        return(\n            <div className='stopwatch'>\n                <h2>Stopwatch</h2>\n                <span className='stopwatch-time'>\n                    {seconds}\n                </span>\n                <button onClick={this.handleStopwatch}>\n                    {this.state.isRunning ? 'Stop': 'Start'}\n                </button>\n                <button onClick={this.handleReset}>Reset</button>\n            </div>\n        )\n    }\n}\nexport default Stopwatch;\n","//Another way to do the component\nimport React from \"react\";\nimport Stats from './Stats';\nimport Stopwatch from \"./Stopwatch\";\nimport PropTypes from 'prop-types';\n\n\n\nconst Header=({players})=>{\n    return(<header>\n        <Stats players={players}/>\n        <h1>Scoreboard</h1>\n        {/*<span className=\"stats\">Players: {props.totalPlayers}</span>*/}\n        <Stopwatch />\n    </header>);\n}\n\nHeader.propTypes = {\n    players: PropTypes.arrayOf(PropTypes.object).isRequired\n}\nexport default Header;","import React from \"react\";\nimport PropTypes from 'prop-types'\n\nconst Counter=({index, score, changeScore})=>{\n\n    //Use => automatically bind to the function, call event handler\n\n\n    //\n    // decrementScore(){\n    //     this.setState(prevState=>({\n    //         score: prevState.score - 1\n    //     }));\n    // }\n\n\n        return(\n            <div className='counter'>\n                <button className='counter-action decrement' onClick={()=>changeScore(index, -1)}>-</button>\n                <span className='counter-score'>{score}</span>\n                {/*<button className='counter-action increment' onClick={()=>this.incrementScore()}>+</button>*/}\n                <button className='counter-action increment' onClick={()=>changeScore(index, 1)}>+</button>\n            </div>\n        );\n}\n\nCounter.propTypes = {\n        index: PropTypes.number,\n        score: PropTypes.number,\n        changeScore: PropTypes.func\n};\n\n\nexport default Counter;","import React from 'react'\nimport PropTypes from \"prop-types\";\n\nconst Icon = (props) =>{\n    return(\n    <svg className={ props.isHighScore ? 'is-high-score' : null } viewBox=\"0 0 44 35\">\n        <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\n        <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\n    </svg>\n    );\n};\n\nIcon.propTypes = {\n    isHighScore: PropTypes.bool\n};\n\nexport default Icon;","import React,{PureComponent}from \"react\";\nimport Counter from './Counter';\nimport PropTypes from 'prop-types'\nimport Icon from \"./Icon\";\n\n\n\nclass Player extends PureComponent{\n    static propTypes={\n        name:PropTypes.string.isRequired,\n        id: PropTypes.number,\n        score: PropTypes.number.isRequired,\n        index:PropTypes.number,\n        removePlayer:PropTypes.func,\n        changeScore: PropTypes.func,\n        isHighScore: PropTypes.bool\n    }\n    render(){\n        const {\n            name,\n            id,\n            score,\n            index,\n            removePlayer,\n            changeScore\n        } = this.props;\n\n        return(<div className='player'>\n        <span className='player-name'>\n            <button className='remove-player' onClick={()=> removePlayer(id)}>\n                x\n            </button>\n            <Icon isHighScore={this.props.isHighScore} />\n            {name}\n        </span>\n\n            <Counter score={score}\n                     index={index}\n                     changeScore={changeScore}/>\n        </div>)\n    }\n\n}\n\n\n    export default Player;","import React, {Component} from 'react';\n\nclass AddPlayerForm extends Component{\n\n    playerInput = React.createRef();\n\n    handleValueChange=(e)=>{\n       this.setState({value: e.target.value});\n    }\n\n    handleSubmit =(e)=>{\n        e.preventDefault();\n        this.props.addPlayer(this.playerInput.current.value);\n        e.currentTarget.reset();\n    }\n\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <input type=\"text\"\n                        ref = {this.playerInput}\n                        placeholder=\"Enter a Player's name\"/>\n\n                <input type=\"submit\"\n                       value=\"Add Player\"/>\n            </form>\n\n        );\n    }\n}\n\nexport default AddPlayerForm;\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Header from './Header';\nimport Player from './Player';\nimport AddPlayerForm from \"./AddPlayerForm\";\n\n\n\n\n    // This is an example of stateless component\n    // const Counter=(props)=>\n    //     <div className='counter'>\n    //         <button className='counter-action decrement'>-</button>\n    //         <span className='counter-score'>{props.score}</span>\n    //         <button className='counter-action increment'>+</button>\n    //     </div>;\n\n    // use state add class component instead (stateful)\n\n\n\n    // Change to be a class\nclass App extends Component{\n        constructor() {\n            super();\n            this.state={\n               players: [\n                   {\n                       name:\"Jane\",\n                       score: 0,\n                       id: 1\n                   },\n                   {\n                       name:\"Mike\",\n                       score: 0,\n                       id:2\n                   },\n                   {\n                       name:\"Tom\",\n                       score: 0,\n                       id:3\n                   },\n                   {\n                       name:\"Wina\",\n                       score: 0,\n                       id:4\n                   },\n                   {\n                       name:\"Jim\",\n                       score: 0,\n                       id:5\n                   }\n               ]\n            }\n        }\n\n        handleScoreChange=(index, delta)=>{\n          this.setState( prevState =>({\n              score: prevState.players[index].score +=delta\n              })\n          );\n        }\n\n        handleAddPlayer = (name)=>{\n           this.setState(prevState=>{\n               return{\n\n                   players:[\n                       //add new player to the top layer\n                       ...prevState.players,\n                       {\n                           name,\n                           score: 0,\n                           id: prevState.players.id+=1\n                       }]\n\n               }\n\n           })\n        }\n\n        handleRemovePlayer = (id) =>{\n            this.setState(prevState=>{\n                return{\n                    players: prevState.players.filter( p=>p.id !==id)\n                }\n\n            });\n        }\n\n        getHighScore = () => {\n            const scores = this.state.players.map( p => p.score );\n            const highScore = Math.max(...scores);\n            if (highScore) {\n                return highScore;\n            }\n            return null;\n        }\n\n\n        render(){\n            const highScore = this.getHighScore();\n\n            return(\n\n                    <div className='scoreboard'>\n                        <Header players= {this.state.players} />\n\n                            {this.state.players.map( (player, index) =>\n                                <Player\n                                    name={player.name}\n                                    score={player.score}\n                                    id = {player.id}\n                                    index = {index}\n                                    removePlayer = {this.handleRemovePlayer}\n                                    changeScore = {this.handleScoreChange}\n                                    isHighScore={highScore === player.score}  // is a player's 'score' prop equal to the high score?\n                                />\n                            )}\n\n                        <AddPlayerForm  addPlayer={this.handleAddPlayer}/>\n                    </div>\n\n            );\n        }\n}\n    // const App=(props)=>\n    //     <div className='scoreboard'>\n    //         <Header title='Scoreboard' totalPlayers={props.initialPlayers.length} />\n    //         {props.initialPlayers.map(player=>\n    //             <Player name={player.name}\n    //                     key={player.id.toString()}/>\n    //         )}\n    //\n    //     </div>;\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}